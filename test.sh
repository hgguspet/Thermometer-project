#!/bin/bash

# Path to the configuration file
CONFIG_FILE="./conf/proj_vars.conf"

# Define the parameters and their default values
parameters=(
    "DBUSER=default_user"
    "DBPASS=default_pass"
    "SERVICE_NAME=MyService"
    "WEB_PORT=8080"
    "NODE_PORT=3000"
    "BUFFER_TABLE=buffer_table"
    "HOURLY_TABLE=hourly_table"
)

# Function to parse the configuration file
parse_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        while IFS='=' read -r key value; do
            # Skip comments and empty lines
            [[ "$key" =~ ^#.*$ || -z "$key" ]] && continue

            # Remove whitespace
            key=$(echo "$key" | xargs)
            value=$(echo "$value" | xargs)

            # Update the parameters list
            for i in "${!parameters[@]}"; do
                param_key="${parameters[$i]%%=*}"
                if [[ "$key" == "$param_key" ]]; then
                    parameters[$i]="$key=$value"
                fi
            done
        done < "$CONFIG_FILE"
    fi
}

# Function to write the configuration back to the file
write_config() {
    # Backup the old configuration file
    cp "$CONFIG_FILE" "${CONFIG_FILE}.bak"

    # Write the configuration to the file
    {
        echo "# Configuration file for the Thermometer Project"
        echo "# Generated by the script"
        for param in "${parameters[@]}"; do
            echo "$param"
        done
    } > "$CONFIG_FILE"
}

# Function to prompt the user for new configuration values
interactive_config() {
    echo "Enter new configuration values. Press Enter to keep the current value."

    for i in "${!parameters[@]}"; do
        key="${parameters[$i]%%=*}"
        current_value="${parameters[$i]#*=}"
        echo -n "$key [$current_value]: "
        read -r new_value

        # If the user enters a value, update it; otherwise, keep the current value
        if [[ -n "$new_value" ]]; then
            parameters[$i]="$key=$new_value"
        else
            parameters[$i]="$key=$current_value"
        fi
    done

    write_config # Save the new configuration
}

# Function to print the configuration
print_config() {
    echo "Current Configuration:"
    for param in "${parameters[@]}"; do
        echo "$param"
    done
}

# Parse the configuration file
parse_config

# Print the current configuration
print_config

# Prompt the user for new values
interactive_config

# Print the updated configuration
echo "Updated Configuration:"
print_config

